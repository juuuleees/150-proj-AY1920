eqn = c(2, 2, 1)
eqn[1]
eqn[0]
eqn[3]
find_x_quad <- function(x) {
projected_values <- vector()
a = x[1]
b = x[2]
c = x[3]
numerator = 0
i = 0
while (i < 2) {
if ((a == 0 && b == 0) || (a != 0 && b == 0) || (a == 0 && b != 0)) {
print("Error")
} else {
sq_root = (b*b) - 4*(a*c)
denominator = 2*a
if (i == 0) {
numerator = -b + sq_root
} else {
numerator = -b - sq_root
}
missing_var = numerator / denominator
projected_values = c(missing_var)
i++
}
}
return (projected_values)
}
find_x_quad <- function(x) {
projected_values <- vector()
a = x[1]
b = x[2]
c = x[3]
numerator = 0
i = 0
while (i < 2) {
if ((a == 0 && b == 0) || (a != 0 && b == 0) || (a == 0 && b != 0)) {
print("Error")
} else {
sq_root = (b*b) - 4*(a*c)
denominator = 2*a
if (i == 0) {
numerator = -b + sq_root
} else {
numerator = -b - sq_root
}
missing_var = numerator / denominator
projected_values = c(missing_var)
i++
}
}
return (vector(projected_values))
}
find_x_quad <- function(x) {
projected_values <- vector()
a = x[1]
b = x[2]
c = x[3]
numerator = 0
i = 0
while (i < 2) {
if ((a == 0 && b == 0) || (a != 0 && b == 0) || (a == 0 && b != 0)) {
print("Error")
} else {
sq_root = (b*b) - 4*(a*c)
denominator = 2*a
if (i == 0) {
numerator = -b + sq_root
} else {
numerator = -b - sq_root
}
missing_var = numerator / denominator
projected_values = c(missing_var)
i++
}
}
return (vector(projected_values))
}
find_x_quad <- function(x) {
projected_values <- vector()
coefficients <- vector()
for (num in x) {
num = as.integer(strsplit(as.character(num), "")[[1]])
}
# numerator = 0
# i = 0
# while (i < 2) {
# 	if ((a == 0 && b == 0) || (a != 0 && b == 0) || (a == 0 && b != 0)) {
# 		print("Error")
# 	} else {
# 		sq_root = (b*b) - 4*(a*c)
# 		denominator = 2*a
# 		if (i == 0) {
# 			numerator = -b + sq_root
# 		} else {
# 			numerator = -b - sq_root
# 		}
# 		missing_var = numerator / denominator
# 		projected_values = c(missing_var)
# 		i++
# 	}
# }
# return (vector(projected_values))
}
find_x_quad(eqn)
projected_values <- vector()
find_x_quad(eqn)
coefficients <- vector()
find_x_quad <- function(x) {
projected_values <- vector()
coefficients <- vector()
for (num in x) {
print(num)
}
# numerator = 0
# i = 0
# while (i < 2) {
# 	if ((a == 0 && b == 0) || (a != 0 && b == 0) || (a == 0 && b != 0)) {
# 		print("Error")
# 	} else {
# 		sq_root = (b*b) - 4*(a*c)
# 		denominator = 2*a
# 		if (i == 0) {
# 			numerator = -b + sq_root
# 		} else {
# 			numerator = -b - sq_root
# 		}
# 		missing_var = numerator / denominator
# 		projected_values = c(missing_var)
# 		i++
# 	}
# }
# return (vector(projected_values))
}
find_x_quad(eqn)
a = -0.0005 / -0.9974
b = 105354.6216 * a
124025.2639 - (-0.0005 / 0.9848) * 105354.6216
?solve
A = matrix(c(1, -0,1900,-0.0403, -0.0331, 0.9911, -0.1935, -0.0003, -0.0004, 0.9994), nrow = 3, ncol = 3, byrow = TRUE)
A = matrix(c(1, -0.1900, -0.0403, -0.0331, 0.9911, -0.1935, -0.0003, -0.0004, 0.9994), nrow = 3, ncol = 3, byrow = TRUE)
;
A = matrix(c(1, -0.1900, -0.0403, -0.0331, 0.9911, -0.1935, -0.0003, -0.0004, 0.9994), nrow = 3, ncol = 3, byrow = TRUE)
A
B = c(5213.04, 105182.07, 124023.7)
A
B
gaussianElimination(A, B)
?solve
solve(A,B)
install.packages('shiny')
setwd("/home/haliya/Documents/cmsc-portal/CMSC 150/150-proj")
getwd()
library(shiny)
runApp("~/150-proj")
runApp("~/")
runApp("/")
runApp("")
runApp("150-proj")
runApp()
install.packages("rJava")
R.home()
