quadraticModel = lm(X1.7 ~ poly(c.0.5..2.5..2..4..3.5..6..5.5., 3, raw=FALSE), data = input)
lines(input$X1.7, predict(quadraticModel), col="blue")
plot(input$X1.7, input$c.0.5..2.5..2..4..3.5..6..5.5., pch = 20, col = "red", main = "wat", xlab = "X", ylab = "Y")
quadraticModel = lm(X1.7 ~ poly(c.0.5..2.5..2..4..3.5..6..5.5., 3, raw=FALSE), data = input)
quadraticModel = lm(X1.7 ~ poly(c.0.5..2.5..2..4..3.5..6..5.5., 1, raw=TRUE), data = input)
plot(input$X1.7, input$c.0.5..2.5..2..4..3.5..6..5.5., pch = 20, col = "red", main = "wat", xlab = "X", ylab = "Y")
plot(input$X1.7, input$c.0.5..2.5..2..4..3.5..6..5.5., pch = 20, col = "red", main = "wat", xlab = "X", ylab = "Y")/lm
?lm
?poly
quadraticModel = lm(X1.7 ~ poly(c.0.5..2.5..2..4..3.5..6..5.5., 1, raw=TRUE), data = input)
lines(input$X1.7, predict(quadraticModel), col="blue")
quadraticModel = lm(X1.7 ~ poly(c.0.5..2.5..2..4..3.5..6..5.5., 2, raw=TRUE), data = input)
lines(input$X1.7, predict(quadraticModel), col="orange")
quadraticModel = lm(X1.7 ~ poly(c.0.5..2.5..2..4..3.5..6..5.5., 3, raw=TRUE), data = input)
lines(input$X1.7, predict(quadraticModel), col="green")
quadraticModel = lm(dist ~ poly(speed, 2, raw=TRUE), data = cars)
plot(cars$speed, cars$dist, pch = 20, col = "red", main = "Distance vs. Speed", xlab =
"Speed", ylab = "Distance")
lines(cars$speed, predict(quadraticModel), col = "green")
T = c(50,50,50,70,70,70,80,80,80,90,90,90,100,100,100)
Y = c(3.3 2.8 2.9 2.3 2.6 2.1 2.5 2.9 2.4 3.0 3.1 2.8 3.3 3.5 3.0)
Y = c(3.3, 2.8, 2.9, 2.3, 2.6, 2.1, 2.5, 2.9, 2.4, 3.0, 3.1, 2.8, 3.3, 3.5, 3.0)
?data.frame
sample = data.frame(T,Y, row.names=NULL, check.rows = FALSE)
sample
plot(sample$T, sample$Y, pch = 20, col = "red", main = "T vs. Y", xlab =
"T", ylab = "Y")
quadraticModel = lm(Y ~ poly(T, 2, raw=TRUE), data = cars)
lines(sample$T, predict(quadraticModel), col = "green")
expr <- function(x) x + 1
expr
expr(1)
getwd()
setwd("/home/haliya/Documents/cmsc-portal/CMSC 150/150-proj/references)
;
")"
/
"""""
setwd("/home/haliya/Documents/cmsc-portal/CMSC 150/150-proj/references")
source("RuzEx06.r")
samp = list(x,y)
list[[1]]
list[1]
samp[[1]]
acm = RegressionACM(1, samp)
acm
sum(x)
sum((x^0))
samp[[1]]
source("RuzEx06.r")
source("RuzEx06.r")
acm = RegressionACM(1, samp)
acm
source("RuzEx06.r")
acm = RegressionACM(1, samp)
source("RuzEx06.r")
acm = RegressionACM(1, samp)
sum(x)
sum((x^0))
sum((x^0) * y)
a = c(1,2,3)
?empty
?empty.dump
a
a = a[!a %in% 1:3]
a
a = c(1)
a
a = a[!a %in% 1:1]
is.vector(a)
a = c(1:10)
size(a)
length(a)
a = a[!a %in% 1:length(a)]
a
a
results = GaussJordanMethod(samp)
BDSM = matrix(1:12, nrow = 3, ncol = 4, byrow = TRUE)
BDSM
sort(BDSM[,1], decreasing = TRUE)
sorted = sort(BDSM[,1], decreasing = TRUE)
sorted
all.equal(BDSM[,1], sorted)
all.equal(1,1)
all.equal(c(1,5,9),c(9,5,1))
?which
max(abs(BDSM[1:3, 1])
)
BDSM[,1]
?arrange
BDSM[order(BDSM[,1]),]
BDSM[order(BDSM[,1], decreasing = TRUE),]
BDSM[order(BDSM[,1]),]
BDSM[(order(BDSM[,1], decreasing = TRUE)/BDSM[1,1]),]
BDSM[(order(BDSM[,1], decreasing = TRUE) / BDSM[1,1]),]
BDSM[1,] = BDSM[(order(BDSM[,1], decreasing = TRUE) / BDSM[1,1]),]
BDSM[1,]
BDSM[order(BDSM[,1], decreasing = TRUE),]
BDSM[1,] + 1
BDSM[1,] = BDSM[order(BDSM[,1], decreasing = TRUE),] / BDSM[1,1]
BDSM[1,] + 1
BDSM[1,] = BDSM[order(BDSM[,1], decreasing = TRUE),]
BDSM = BDSM[order(BDSM[,1], decreasing = TRUE),]
BDSM
BDSM[1,]
BDSM[1,] / 9
BDSM[1,] = BDSM[1,] / 9
BDSM
BDSM[1,]
BDSM = matrix(c(-1:-12), nrow = 3, ncol = 4, byrow = TRUE)
BDSM
BDSM = BDSM[order(BDSM[,1], decreasing = TRUE),]
BDSM
BDSM = BDSM[order(abs(BDSM[,1]), decreasing = TRUE),]
BDSM
BDSM[1,] = BDSM[1,] / -9
BDSM
BDSM[order(abs(BDSM[,1]), decreasing = TRUE),]
BDSM[order(abs(BDSM[,2]), decreasing = TRUE),]
BDSM
BDSM[order(abs(BDSM[2:3,2]), decreasing = TRUE),]
BDSM[order(abs(BDSM[,2]), decreasing = TRUE),]
BDSM[,order(abs(BDSM[2:3,2]), decreasing = TRUE)]
BDSM[order(abs(BDSM[,2]), decreasing = TRUE),]
BDSM
BDSM[2:3,]
BDSM[,order(abs(BDSM[2:3,2]), decreasing = TRUE)]
BDSM[order(abs(BDSM[2:3,2]), decreasing = TRUE),]
BDSM
BDSM[2:3,]
abs(BDSM[2:3,])
abs(BDSM[2:3,2])
BDSM[2:3,2]
BDSM[2:3,2:3]
BDSM[2:3,]
abs(BDSM[2:3,])
order(abs(BDSM[2:3,]))
BDSM[order(abs(BDSM[2:3,])),]
BDSM[(order(abs(BDSM[2:3,])),]
BDSM[(order(abs(BDSM[2:3,]))),]
BDSM[order(abs(BDSM[2:3,2]), decreasing = TRUE),]
BDSM
BDSM[2:3,]
BDSM[2:3,2]
order(BDSM[2:3,2], descending = TRUE)
order(BDSM[2:3,2])
BDSM[2:3,2] = BDSM[order(abs(BDSM[2:3,2]), decreasing = TRUE),]
BDSM[2:3,] = BDSM[order(abs(BDSM[2:3,2]), decreasing = TRUE),]
BDSM
BDSM[2:3,] = BDSM[order(abs(BDSM[3:2,2]), decreasing = TRUE),]
BDSM
BDSM = matrix(c(-1, -1.111111, -1.222222, -1.333333, -5, -6, -7, -8, -1, -2, -3, -4), nrow = 3, ncol = 4, byrow = TRUE)
BDSM
BDSM[2:3,] = BDSM[order(abs(BDSM[3:2,2]), decreasing = TRUE),]
BDSM
BDSM = matrix(c(-1, -1.111111, -1.222222, -1.333333, -5, -6, -7, -8, -1, -2, -3, -4), nrow = 3, ncol = 4, byrow = TRUE)
BDSM[3:2,]
BDSM[3:2,] = BDSM[order(abs(BDSM[3:2,2]), decreasing = TRUE),]
BDSM
BDSM = matrix(c(-1, -1.111111, -1.222222, -1.333333, -5, -6, -7, -8, -1, -2, -3, -4), nrow = 3, ncol = 4, byrow = TRUE)
BDSM = BDSM[order(abs(BDSM[3:2,2]), decreasing = TRUE),]
BDSM
BDSM = matrix(c(-1, -1.111111, -1.222222, -1.333333, -5, -6, -7, -8, -1, -2, -3, -4), nrow = 3, ncol = 4, byrow = TRUE)
BDSM
BDSM[2:3]
BDSM[2:3,]
BDSM[2:3,] = BDSM[order(abs(BDSM[3:2,])),]
BDSM[2:3,] = BDSM[order(abs(BDSM[3:2,]))]
BDSM
BDSM = matrix(c(-1, -1.111111, -1.222222, -1.333333, -5, -6, -7, -8, -1, -2, -3, -4), nrow = 3, ncol = 4, byrow = TRUE)
BDSM
BDSM[2:3,]
BDSM[2:3,] = 0
BDSM
BDSM = matrix(c(-1, -1.111111, -1.222222, -1.333333, -5, -6, -7, -8, -1, -2, -3, -4), nrow = 3, ncol = 4, byrow = TRUE)
BDSM[2:3,] = BDSM[order(abs(BDSM[,2])),]
BDSM[2:3,] = BDSM[order(abs(BDSM[,2]))]
BDSM[2:3,] = BDSM[order(abs(BDSM[,2:3]))]
BDSM[2:3,] = BDSM[order(abs(BDSM[3:2,]))]
BDSM
BDSM = matrix(c(-1, -1.111111, -1.222222, -1.333333, -5, -6, -7, -8, -1, -2, -3, -4), nrow = 3, ncol = 4, byrow = TRUE)
BDSM[2:3,] = BDSM[order(abs(BDSM[3:2,])),]
BDSM[2:3,] = BDSM[order(abs(BDSM[3:2,2]), decreasing = TRUE),]
BDSM
BDSM = matrix(c(-1, -1.111111, -1.222222, -1.333333, -5, -6, -7, -8, -1, -2, -3, -4), nrow = 3, ncol = 4, byrow = TRUE)
BDSM
BDSM[2:3,]
order(abs(BDSM[2:3,]))
ex = order(abs(BDSM[2:3,]))
ex
ex = BDSM[order(abs(BDSM[2:3,]))]
ex
ex = BDSM[2:3,]
ex
ex = ex[order(abs(ex)),]
ex = ex[order(abs(ex))]
ex
ex = BDSM[2:3,]
ex = ex[order(abs(ex[1:2,])),]
ex = ex[order(abs(ex[1:2,]))]
ex
ex = BDSM[2:3,]
ex[1]
ex[1,]
order(ex[1,])
order(ex[1:2,])
BDSM
ex = BDSM[order(abs(BDSM[2:3,]))]
ex
ex = BDSM[order(abs(BDSM[2:3,])),]
ex = BDSM[order(abs(BDSM[2:3,]), decreasing = TRUE),]
ex = BDSM[order(abs(BDSM[2:3,]), decreasing = TRUE)]
ex
ex = BDSM[order(abs(BDSM[,2]), decreasing = TRUE)]
ex
BDSM
ex = BDSM[(order(abs(BDSM[2:3,]), decreasing = TRUE)),]
ex = BDSM[(order(abs(BDSM[,2]), decreasing = TRUE)),]
ex
BDSM[,2]
BDSM[,2:3]
BDSM[2:3,2]
ex = BDSM[(order(abs(BDSM[2:3,2]), decreasing = TRUE)),]
ex
exBDSM[2:3,2]
BDSM[2:3,2]
ordeR(BDSM[2:3,2])
order(BDSM[2:3,2])
BDSM = matrix(c(-1, -1.111111, -1.222222, -1.333333, -1, -2, -3, -4, -5, -6, -7, -8), nrow = 3, ncol = 4, byrow = TRUE)
BDSM
BDSM[2:3,2]
order(BDSM[2:3,2])
ex = BDSM[(order(abs(BDSM[2:3,2]), decreasing = TRUE)),]
ex
BDSM
BDSM[2:3]
BDSM[2:3,]
BDSM[order(BDSM[2:3,], decreasing = TRUE),]
BDSM[order(BDSM[2:3,], decreasing = TRUE)]
BDSM[order(BDSM[2:3,])]
BDSM[order(BDSM[1:2,])]
BDSM[1:2,]
order(BDSM[1:2,])
order(BDSM[1:2,2])
order(abs(BDSM[1:2,2]))
BDSM[order(abs(BDSM[1:2,2])),]
BDSM
ex = BDSM
ex
BDSM
ex
ex[order(abs(ex[,2]))]
ex = ex[order(abs(ex[,2]))]
ex
ex = BDSM
ex = ex[order(abs(ex[,2]), decreasing = TRUE),]
ex
ex = BDSM
order(abs(ex[,2]))
BDSM
order(abs(ex[,2]), decreasing = TRUE)
order(abs(ex[2:3,2]), decreasing = TRUE)
ex[2:3,] = BDSM[order(abs(ex[2:3,2]), decreasing = TRUE), ]
ex
sorted_col = ex[order(abs(ex[2:3,]))]
sorted_col
sorted_col = ex[order(abs(ex[2:3,]), decreasing = TRUE)]
sorted_col
ex
ex = BDSM
ex
BDSM
ex[2:3,] = BDSM[order(abs(ex[-1:-2,2]), decreasing = TRUE), ]
ex
ex = BDSM
order(abs(ex[-1:-2, 2]), decreasing = TRUE)
ex
ex[-1,]
order(abs(ex[-1, 2]), decreasing = TRUE)
ex[2:3,]
ex[2:1,]
ex
ex
ex[,]
ex[2,]
ex[(3-1),]
a = c(1,3,4,2)
sort(a)
order(a)
sort(abs(ex[-1, 2]), decreasing = TRUE)
ex
ex[sort(abs(ex[-1, 2]), decreasing = TRUE),]
ex
?order
ex
ex[2:3,]
sort.list(abs(ex[,]), partial = ex[2:3,], decreasing = TRUE)
sort.list(abs(ex[,]), partial = c(2,3), decreasing = TRUE)
sort(ex, decreasing = TRUE)
ex
ex = matrix(c(-1:-8), nrow = 2, ncol = 4, byrow = TRUE)
ex
order(abs(ex[,2]))
order(abs(ex[,2]), decreasing = TRUE)
ex = ex[order(abs(ex[,2]), decreasing = TRUE),]
ex
BDSM
BDSM[2:3,] = ex
BDSM
ex2 = BDSM[order(abs(BDSM[,2]), decreasing = TRUE),]
exx2
ex2
ex2 = BDSM
ex = BDSM
ex
BDSM
ex
BDSM
ex = BDSM[2:3,]
ex
count(ex)
length(ex)
BDSM
brows = nrows(BDSM)
brows = nrow(BDSM)
brows
BDSM[1:brows, (1+1)]
BDSM
ex
ex = BDSM
clear
ex
order(ex, decreasing = TRUE)
order(ex[,], decreasing = TRUE)
order(ex[1:3,], decreasing = TRUE)
ex[order(ex[1:3,], decreasing = TRUE),]
ex[order(ex[1:3], decreasing = TRUE),]
order(ex[1:3], decreasing = TRUE)
order(ex[2:3], decreasing = TRUE)
ex[2:3,]
order(ex, decreasing = TRUE)
order(ex[2:3], decreasing = TRUE)ex = ex[2:3,]
ex = ex[2:3,]
ex
ex = ex[order(ex, decreasing = TRUE)]
ex
ex = BDSM[2:3,]
ex
ex = ex[order(ex, decreasing = TRUE),]
order(ex, decreasing = TRUE)
order(ex[,2], decreasing = TRUE)
order(ex, decreasing = TRUE)
order(ex[,], decreasing = TRUE)
order(ex[1:2,], decreasing = TRUE)
order(ex[1,], decreasing = TRUE)
ex[1,]
expr
expr(1)
source("RuzEx03.r")
source("RuzEx03.r")
domme = expr(parse(text = "function (x) 9*x_2 + 6*x_1 + 1"))
?expr
domme = "function (x) 9*x_2 + 6*x_1 + 1"
sub = "function (x) 4*x_2 + 2*x_1 + 1"
spider_gag = "function (x) 1*x_2 + 2*x_1 + 1"
inputs = list(domme, sub, spider_gag)
results = AugCoeffMatrix(inputs)
results
domme <- "function (x) 9*x_2 + 6*x_1 + 1"
sub <- "function (x) 4*x_2 + 4*x_1 + 1"
spider_gag <- "function (x) 1*x_2 + 2*x_1 + 1"
domme <- function (x) 9 * x2 + 6 * x1 + 1
sub <- function (x) 4 * x2 + 4 * x1 + 1
spider_gag <- function (x) 1 * x2 + 2 * x1 + 1
inputs = list(domme, sub, spider_gag)
results = AugCoeffMatrix(inputs)
results
domme <- function (x) 9 * x2 + 6 * x1 + 1 * x0
sub <- function (x) 4 * x2 + 4 * x1 + 1 * x0
spider_gag <- function (x) 1 * x2 + 2 * x1 + 1 * x0
inputs = list(domme, sub, spider_gag)
results
results = AugCoeffMatrix(inputs)
domme <- function (x) 9 * x2 + 6 * x1 + 1 * x0
domme(1)
domme <- function (x) 9 * x^2 + 6 * x^1 + 1 * x^0
domme(1)
sub <- function (x) 4 * x^2 + 4 * x^1 + 1 * x^0
spider_gag <- function (x) 1 * x^2 + 2 * x^1 + 1 * x^0
inputs = list(domme, sub, spider_gag)
results = AugCoeffMatrix(inputs)
domme <- function (x2, x1, x0) 9 * x2 + 6 * x1 + 1 * x0
sub <- function (x2, x1, x0) 4 * x2 + 4 * x1 + 1 * x0
spider_gag <- function (x2, x1, x0) 1 * x2 + 2 * x1 + 1 * x0
domme(1, 1, 1)
results = AugCoeffMatrix(inputs)
shibari = "1"
kinbaku = 1
shibari + kinbaku
shibari = paste(shibari)
shibari = paste(shibari, kinbaku)
shibari
shibari = list()
kinbaku = c(1,2,3)
shibari.append(kinbaku)
append(shibari, kinbaku)
shibari = append(shibari, kinbaku)
shibari
prisoner_cuffs = c(4,5,6)
shibari = append(kinbaku)
?append
shibari = append(shibari, kinbaku, prisoner_cuffs)
shibari
prisoner_cuffs
shibari = append(shibari, c(kinbaku, prisoner_cuffs))
shibari
shibari = list()
shibari = append(shibari, c(kinbaku, prisoner_cuffs))
shibari
shibari = list(kinbaku, prisoner_cuffs)
shibari
shibari = list()
append(shibari, list(kinakbaku))
append(shibari, list(kinabaku))
append(shibari, list(kinbaku))
append(shibari, list(kinbaku, prisoner_cuffs))
sub <- function (x1, x0) 1 * x1 + 2 * x0
inputs = list(domme, sub, spider_gag)
inputs
AugCoeffMatrix(inputs)
?vector
dungeon = matrix(0, nrow = 3, ncol = 3, byrow = TRUE)
dungeon
shibari = c(1,2,3)
try_this <- function (mtrx, vec_in) {}
try_this <- function (mtrx, vec_in) {
i = 1
repeat ()
try_this <- function (mtrx, vec_in) {
i = 1
repeat (
if ((i+1) == 3) {}
}
try_this <- function (mtrx, vec_in) {
i = 1
repeat (
if ((i+1) == 3) {
mtrx[,i] = vec_in[i]
}
i = i + 1
modulo?
;
?modulo
%%
2 %% 4
4 %% 2
6 %% 2
1 %% 2
?append
shibari = c(2,3)
append(shibari, 1, after = length(-1))
shibari = c(2,3)
append(shibari, 1, after = length(0))
append(shibari, 1, after = length(-2))
append(shibari, 1, after = length(-3))
shibari = c(2,3)
append(shibari, 1, after = length(1))
append(shibari, 1, after = length(2))
shibari
shibari[1]
shibari[2]
append(shibari, 1, after = 1)
shibari = c(1:9)
shibari
shibari / 3
shibari[1:3]
i = 1
shibari[i:(i+2)]
9 /3
shibari = c(1,2,23)
shibari[-1]
rev(shibari)
a = parse(text = "function (x) x + 1")
a
a(1)
a = eval(parse(text = "function (x) x + 1"))
a(1)
b = a
b(1)
a = x^2
a = eval(parse(text = "function (x) x^2"))
a(2)
a
b = eval(parse(text = "function (x) x + 1"))
c = list(a,b)
c
c[1]
c[[1]]
d = c[[1]]
d(1)
d(2)
c[[1]](2)
e = "2"
d(2)
d(e)
e = "too tried for this shit"
is.character(e)
length(e)
e = c("1", "2")
is.character(e)
is.vector(e)
length(e)
